@begin[ref=index](section)
   @title(Overview)
   @c(material-reconstruction) is a tool which helps to restore 2D and 3D images
   according to their two-point and lineal-path correlation function using the
   algorithm called simulated annealing.

   According to Salvatore Torquato's book "Random Heterogeneous Materials",
   two-point correlation function is defined as follows:
   @begin(quote)
      The two-point or autocorrelation function S₂(r) = S₂¹(r) for statistically
   homogeneous media can be obtained by randomly tossing line segments of length
   r with a specified orientation [into the image] and counting the fraction of
   times the end points fall in phase 1.
   @end(quote)
   A definition of lineal-path function is similar:
   @begin(quote)
      The lineal-path function L₂(r) = L₂¹(r) for statistically homogeneous
   media can be obtained by randomly tossing line segments of length r with a
   specified orientation [into the image] and counting the fraction of times a
   whole segment falls in phase 1.
   @end(quote)

   The term "phase" means just a value of a pixel in an image. This library
   works with two-phase images which means its pixels can have a value @c(0) or
   @c(1).
@end(section)

@begin(section)
   @title(Dependencies)
   This library has few dependencies from the "C world":
   @begin(list)
      @item(A C compiler, like gcc or clang)
      @item(OpenCL)
      @item(FFTW3 with double precision)
   @end(list)
@end(section)

@begin(section)
   @title(Example)
   The following example takes an original image (a slice of @b(FIXME: ceramic))
   and an initial approximation and reconstructs the original. Dimensions of the
   original image are 300x300 pixels. The code below was used to run a
   reconstruction. The value of @c(steps) argument was @c(3000000).
   @begin[lang=lisp](code)
(defpackage annealing-test
  (:use #:cl #:recon)
  (:import-from #:alexandria #:curry)
  (:export #:test-annealing))
(in-package :annealing-test)

(defun read-image (name dimensions)
  "Read a binary file into an array of octets."
  (let* ((array (make-array dimensions :element-type 'bit))
         (displaced (make-array (reduce #'* dimensions)
                                :element-type 'bit
                                :displaced-to array
                                :displaced-index-offset 0)))
    (with-open-file (input name :element-type '(signed-byte 8))
      (read-sequence displaced input))
    array))

(defun make-modifier ()
  "Create a modifier which will sample the pixel at the boundary
between phases (zeros and ones) and change the value of the pixel to
the opposite."
  (make-instance 'batch-modifier
                 :modifier (make-instance 'flipper
                                          :sampler (make-instance 'interface-sampler))))

(defclass image-all (image-s2 image-l2)
  ()
  (:documentation "Image with S₂ and L₂ correlation functions"))

(defclass corrfn-all (corrfn-s2 corrfn-l2)
  ()
  (:documentation "L₂ and S₂ correlation functions of the original"))

(defun test-annealing/w-init (array steps &key (t0 1d-5))
  "Run simulation of annealing for STEPS steps. ARRAY is the original binary
image. T0 is initial temperature of the system."
  (declare (type (simple-array bit) array))
  (with-gpu-objects (;; Create OpenCL context
                     (ctx gpu-context)
                     ;; Calculate correlation functions of the original
                     (target corrfn-all
                             ;; We have to supply OpenCL context if we use S₂ function
                             :context    ctx
                             :s2        (s2 array)
                             :l2-void   (l2 array 0)
                             :l2-solid  (l2 array 1)
                             ;; Always pass dimensions of the original
                             :dimensions (array-dimensions array))
                     ;; Create an image which will be reconstructed
                     (recon  image-all
                             ;; Pass OpenCL context.
                             :context ctx
                             ;; In case of image, you only need to supply an initial approximation.
                             :array   (initialize-random array))
                     ;; 
                     (proximeter proximeter
                                 :target target
                                 :recon  recon))
    (let ((cost-state (make-instance 'cost-state
                                     :proximeter proximeter
                                     :target target
                                     :recon  recon))
          (cooldown  (aarts-korst-cooldown :n 25000 :alpha 1d0))
          (modifier  (make-modifier)))
      (make-instance 'annealing-results
                     :cost (run-annealing target recon t0 steps
                                          :cost     (alexandria:curry #'cost cost-state)
                                          :cooldown cooldown
                                          :modifier modifier)
                     :array (image-array recon)))))
   @end(code)

   The original image: @image[src=original.png]()
   The initial approximation: @image[src=init.png]()
   The reconstruction: @image[src=reconstruction.png]()
@end(section)

@begin(section)
   @title(API)
   @u(Conditions)
   @cl:with-package[name="material-reconstruction"](
      @cl:doc(condition recon-error)
   )

   @u(GPU context)
   @cl:with-package[name="material-reconstruction"](
      @cl:doc(struct gpu-context)
      @cl:doc(function create-gpu-context)
      @cl:doc(function destroy-gpu-context)
      @cl:doc(macro with-gpu-context)
   )

   @u(Images)
   @cl:with-package[name="material-reconstruction"](
      @cl:doc(class image)
      @cl:doc(class image-l2)
      @cl:doc(class image-s2)
      @cl:doc(class image-all)
      @cl:doc(function create-image)
      @cl:doc(generic destroy-image)
      @cl:doc(function image-pixel)
      @cl:doc(macro with-image)
      @cl:doc(macro with-images)
   )

   @u(Proximeter)
   @cl:with-package[name="material-reconstruction"](
      @cl:doc(struct proximeter)
      @cl:doc(function create-proximeter)
      @cl:doc(function destroy-proximeter)
      @cl:doc(function proximity)
      @cl:doc(macro with-proximeter)
   )

   @u(Modifiers and samplers)
   @cl:with-package[name="material-reconstruction"](
      @cl:doc(class modifier)
      @cl:doc(class sampler)
      @cl:doc(class flipper)
      @cl:doc(class swapper)
      @cl:doc(class batch-modifier)
      @cl:doc(class interface-sampler)
      @cl:doc(class uniform-sampler)
   )

   @u(Cooldown schedules)
   @cl:with-package[name="material-reconstruction"](
      @cl:doc(function exponential-cooldown)
      @cl:doc(function aarts-korst-cooldown)
   )

   @u(Initialization)
   @cl:with-package[name="material-reconstruction"](
      @cl:doc(function initialize-random)
   )

   @u(Cost function and cost state)
   @cl:with-package[name="material-reconstruction"](
      @cl:doc(class cost-state)
      @cl:doc(function cost)
   )

   @u(Simulated annealing)
   @cl:with-package[name="material-reconstruction"](
      @cl:doc(function annealing-step)
      @cl:doc(function run-annealing)
   )

@end(section)
